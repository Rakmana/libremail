#!/usr/bin/php7.0
<?php

/**
 * WebSocket Server
 *
 * This is the websocket server for the web front-end to
 * connect to. This process can be run standalone, manually
 * or (more commonly) it's invoked via the daemon script.
 */
use App\Log
  , App\Daemon
  , App\Startup
  , App\Constants
  , Pimple\Container
  , App\Server\WebServer
  , App\Server\StatsServer
  , Exception as Exception
  , React\EventLoop\Factory
  , Ratchet\App as RatchetApp
  , App\Console\ServerConsole
  , MKraemer\ReactPCNTL\PCNTL
  , App\Exceptions\Terminate as TerminateException;

// Set up paths and constants
set_time_limit( 0 );
define( 'BASEPATH', __DIR__ );
date_default_timezone_set( 'UTC' );

// Load the vendor libraries
require( BASEPATH .'/vendor/autoload.php' );

// Load configuration files and parse the CLI arguments
$constants = parse_ini_file( BASEPATH .'/config/constants.ini', FALSE );
$default = parse_ini_file( BASEPATH .'/config/default.ini', TRUE );
$local = parse_ini_file( BASEPATH .'/config/local.ini', TRUE );
$config = array_replace_recursive( $default, $local );
Constants::process( $constants );
unset( $constants );

// Set the memory limit from the config
ini_set( 'memory_limit', $config[ 'app' ][ 'memory' ] );

// Set up dependency container and register all services
$di = new Container();

// Store the configuration as a service
$di[ 'config' ] = $config;

// Console/CLI service
$di[ 'console' ] = new ServerConsole( $config );
$di[ 'cli' ] = function ( $c ) {
    return $c[ 'console' ]->getCLI();
};

// Logging service
$di[ 'log' ] = function ( $c ) {
    $interactive = ( $c[ 'console' ]->interactive === TRUE );
    return new Log(
        $c[ 'cli' ],
        $c[ 'config' ][ 'serverlog' ],
        $interactive );
};

// Initialize the error and exception handlers
$di[ 'log' ]->init();

// Parse the CLI
$di[ 'console' ]->init();

// React event loop, used for Ratchet.
$di[ 'loop' ] = Factory::create();

// Set up the signal handler to shutdown
$HALT = function () use ( $di ) {
    if ( isset( $di[ 'loop' ] ) && $di[ 'loop' ] ) {
        $di[ 'loop' ]->stop();
    }
    throw new TerminateException;
};

// Set up process handler bindings for React
$pcntl = new PCNTL( $di[ 'loop' ] );
$pcntl->on( SIGHUP, $HALT );
$pcntl->on( SIGINT, $HALT );
$pcntl->on( SIGTERM, $HALT );
$pcntl->on( SIGQUIT, $HALT );

// Create a new socket server handler
$di[ 'server.web' ] = new WebServer( $di[ 'log' ] );
$di[ 'server.stats' ] = new StatsServer( $di[ 'log' ], $di[ 'loop' ] );

// Ratchet web server instance
$di[ 'ratchet' ] = new RatchetApp(
    $config[ 'server' ][ 'host' ],
    $config[ 'server' ][ 'port' ],
    $config[ 'server' ][ 'address' ],
    $di[ 'loop' ] );
// Socket route
$di[ 'ratchet' ]->route(
    $config[ 'server' ][ 'endpoint' ][ 'stats' ],
    $di[ 'server.stats' ],
    $config[ 'server' ][ 'allowed_origins' ]);
// Web route
$di[ 'ratchet' ]->route(
    $config[ 'server' ][ 'endpoint' ][ 'web' ],
    $di[ 'server.web' ],
    $config[ 'server' ][ 'allowed_origins' ]);

// Run the loop until we hit a halt signal
try {
    $startup = new Startup( $di );
    $startup->runServer();
    $di[ 'ratchet' ]->run();
}
// Gracefully exit if we're terminated
catch ( TerminateException $e ) {
    exit( 0 );
}
